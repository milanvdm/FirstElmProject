var _user$project$Validation$ifInvalid = F2(
	function (test, error) {
		var validator = function (subject) {
			return test(subject) ? {
				ctor: '::',
				_0: error,
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
		};
		return validator;
	});
var _user$project$Validation$isValidEmail = function () {
	var validEmail = _elm_lang$core$Regex$caseInsensitive(
		_elm_lang$core$Regex$regex('\\S+@\\S+\\.\\S+'));
	return _elm_lang$core$Regex$contains(validEmail);
}();
var _user$project$Validation$ifInvalidEmail = _user$project$Validation$ifInvalid(
	function (_p0) {
		return !_user$project$Validation$isValidEmail(_p0);
	});
var _user$project$Validation$isNothing = function (subject) {
	var _p1 = subject;
	if (_p1.ctor === 'Just') {
		return false;
	} else {
		return true;
	}
};
var _user$project$Validation$ifNothing = _user$project$Validation$ifInvalid(_user$project$Validation$isNothing);
var _user$project$Validation$ifEmptySet = _user$project$Validation$ifInvalid(_elm_lang$core$Set$isEmpty);
var _user$project$Validation$ifEmptyDict = _user$project$Validation$ifInvalid(_elm_lang$core$Dict$isEmpty);
var _user$project$Validation$ifNotInt = F2(
	function (error, subject) {
		var _p2 = _elm_lang$core$String$toInt(subject);
		if (_p2.ctor === 'Ok') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: error,
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Validation$lacksNonWhitespaceChars = _elm_lang$core$Regex$regex('^\\s*$');
var _user$project$Validation$ifBlank = _user$project$Validation$ifInvalid(
	_elm_lang$core$Regex$contains(_user$project$Validation$lacksNonWhitespaceChars));
var _user$project$Validation$any = F2(
	function (validators, subject) {
		any:
		while (true) {
			var _p3 = validators;
			if (_p3.ctor === '[]') {
				return true;
			} else {
				var _p4 = _p3._0(subject);
				if (_p4.ctor === '[]') {
					var _v4 = _p3._1,
						_v5 = subject;
					validators = _v4;
					subject = _v5;
					continue any;
				} else {
					return false;
				}
			}
		}
	});
var _user$project$Validation$eager = F2(
	function (validators, subject) {
		eager:
		while (true) {
			var _p5 = validators;
			if (_p5.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p6 = _p5._0(subject);
				if (_p6.ctor === '[]') {
					var _v8 = _p5._1,
						_v9 = subject;
					validators = _v8;
					subject = _v9;
					continue eager;
				} else {
					return _elm_lang$core$Maybe$Just(_p6._0);
				}
			}
		}
	});
var _user$project$Validation$all = function (validators) {
	var validator = function (subject) {
		var accumulateErrors = F2(
			function (currentValidator, totalErrors) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					totalErrors,
					currentValidator(subject));
			});
		return A3(
			_elm_lang$core$List$foldl,
			accumulateErrors,
			{ctor: '[]'},
			validators);
	};
	return validator;
};
